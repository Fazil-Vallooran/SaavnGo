package main

import (
	"fmt"
	"jioSaavnAPI/config"
	"jioSaavnAPI/middleware"
	"jioSaavnAPI/routes"
	"log"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "jioSaavnAPI/docs" // This will be generated by swag init
)

// @title           JioSaavn API
// @version         1.0
// @description     A public read-only API for JioSaavn music data
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.email  your-email@example.com

// @license.name  MIT
// @license.url   http://opensource.org/licenses/MIT

// @host      localhost:8080
// @BasePath  /

// @schemes http https
func main() {
	// Load configuration
	cfg := config.LoadConfig()

	// Initialize Gin router
	r := gin.New()

	// Use recovery middleware to handle panics
	r.Use(gin.Recovery())

	// Use custom middleware
	r.Use(middleware.CORS())
	r.Use(middleware.MethodFilter())
	r.Use(middleware.Logger())

	// Swagger documentation route
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Register all routes
	routes.RegisterRoutes(r)

	// Health check endpoint
	r.GET("/health", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"status":  "ok",
			"message": "JioSaavn API is running",
		})
	})

	// Start server
	serverAddr := fmt.Sprintf(":%s", cfg.ServerPort)
	log.Printf("Starting JioSaavn API server on %s", serverAddr)
	log.Printf("Health check available at http://localhost%s/health", serverAddr)
	log.Printf("Swagger documentation available at http://localhost%s/swagger/index.html", serverAddr)

	if err := r.Run(serverAddr); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}
